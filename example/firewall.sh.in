#!/bin/sh
# The firewall script to provides the ability to capture the web request from 
# the clients and redirect them to the login page to get the authorization to 
# access the network.

PATH=/sbin:/bin:/usr/sbin:/usr/bin:@prefix@/sbin:@prefix@/bin
prefix=@prefix@
exec_prefix=@exec_prefix@

IPTABLES=/sbin/iptables
IPSET=/usr/sbin/ipset

NAME="rahunas"
INIT=@sysconfdir@/default/rahunas
RUN=@localstatedir@/run/rahunas-firewall

RUN_DAEMON=no

test -f $INIT || exit 0 
. $INIT

test "$RUN_DAEMON" = "yes" || exit 0
test -f $RAHUNAS_CONFIG || exit 1

set -e

get_config_value () {
  key=$1
  cat $RAHUNAS_CONFIG | grep -v ^/ | grep -w "$key" | cut -d= -f2 | sed 's/^ *\(.*[^ ]\) *$/\1/' | sed 's/"//g'
}

# Get configuration
DEV_WAN=`get_config_value dev_wan`
DEV_LAN=`get_config_value dev_lan`
BRIDGE=`get_config_value bridge`
MASQUERADE=`get_config_value masquerade`
SERVER=`get_config_value server`
CLIENTS_RANGE_START=`get_config_value clients_range_start`
CLIENTS_RANGE_END=`get_config_value clients_range_end`
CLIENTS_NETWORK=`get_config_value clients_network`
EXCLUDED=`get_config_value excluded`
IGNORE_MAC=`get_config_value ignore_mac`
BANDWIDTH_SHAPE_IMQ=`get_config_value bandwidth_shape_imq`
FORWARD_DHCP=`get_config_value forward_dhcp`
FORWARD_DNS=`get_config_value forward_dns`
PROXY_PORT=`get_config_value proxy_port`
PROXY_HOST=`get_config_value proxy_host`
TRANSPARENT_PROXY=`get_config_value transparent_proxy`
SSH=`get_config_value ssh`
BITTORRENT_BLOCK=`get_config_value bittorrent_block`

# Bridge config
if [ "$BRIDGE" = "yes" ]; then
  DEV_IN_PARAM="-m physdev --physdev-in"
  DEV_OUT_PARAM="-m physdev --physdev-out"
else
  DEV_IN_PARAM="-i"
  DEV_OUT_PARAM="-o"
fi

# Set declaration
SETNAME="${NAME}_set"

# Chains declaration
CHAIN_INPUT="${NAME}_input"
CHAIN_INPUT_AUTH="${NAME}_input_authorized"
CHAIN_FORWARD="${NAME}_forward"
CHAIN_FORWARD_AUTH="${NAME}_forward_authorized"
CHAIN_MANGLE_PREROUTING="${NAME}_mangle_prerouting"
CHAIN_MANGLE_FORWARD="${NAME}_mangle_forward"
CHAIN_MANGLE_POSTROUTING="${NAME}_mangle_postrouting"
CHAIN_NAT_PREROUTING="${NAME}_nat_prerouting"
CHAIN_NAT_POSTROUTING="${NAME}_nat_postrouting"
CHAIN_NAT_AUTHEN="${NAME}_nat_authen"

# P2P checking chains declaration
CHAIN_P2P_DETECT="${NAME}_p2p_detect"
CHAIN_P2P_RECHECK="${NAME}_p2p_recheck"
CHAIN_P2P_CHECK="${NAME}_p2p_check"
P2P_SET="rahunas_p2p"

# Allow incoming to server
SERVER_PORTS_ALLOW="80,443,8443,8888"

# Intercept requesting ports
SERVER_PORTS_INTERCEPT="80,8080,8088,3128"

##
# Add set
##
add_set () {
  ipset_opt=""
  ipset_ignoremac=""
  
  if [ "$CLIENTS_NETWORK" != "" ]; then
    ipset_opt="--network $CLIENTS_NETWORK"
  else
    ipset_opt="--from $CLIENTS_RANGE_START --to $CLIENTS_RANGE_END"
  fi
  
  if [ "$IGNORE_MAC" = "yes" ]; then
    ipset_ignoremac="--ignoremac"
  fi
  
  $IPSET -N $SETNAME rahunas $ipset_opt $ipset_ignoremac 

  if [ "$BITTORRENT_BLOCK" = "throttle" ]; then
    $IPSET -N $P2P_SET iphash
  fi
}

##
# Cleanup set
##
cleanup_set () {
  $IPSET -F $SETNAME
  $IPSET -X $SETNAME

  if [ "$BITTORRENT_BLOCK" = "throttle" ]; then
    $IPSET -F $P2P_SET
    $IPSET -X $P2P_SET 
  fi
}

##
# Cleanup old rules
##
cleanup () {
  $IPTABLES -D INPUT -m connmark --mark 2/2 -j $CHAIN_INPUT_AUTH
  $IPTABLES -D INPUT -j $CHAIN_INPUT
  $IPTABLES -D FORWARD -m connmark --mark 2/2 -j $CHAIN_FORWARD_AUTH
  $IPTABLES -D FORWARD -j $CHAIN_FORWARD
  $IPTABLES -t mangle -D PREROUTING -j $CHAIN_MANGLE_PREROUTING
  $IPTABLES -t mangle -D FORWARD -j $CHAIN_MANGLE_FORWARD
  $IPTABLES -t mangle -D POSTROUTING -j $CHAIN_MANGLE_POSTROUTING
  $IPTABLES -t nat -D PREROUTING -j $CHAIN_NAT_PREROUTING
  $IPTABLES -t nat -D POSTROUTING -j $CHAIN_NAT_POSTROUTING
  
  $IPTABLES -F $CHAIN_INPUT_AUTH
  $IPTABLES -X $CHAIN_INPUT_AUTH

  $IPTABLES -F $CHAIN_INPUT
  $IPTABLES -X $CHAIN_INPUT
  
  $IPTABLES -F $CHAIN_FORWARD_AUTH
  $IPTABLES -X $CHAIN_FORWARD_AUTH

  $IPTABLES -F $CHAIN_FORWARD
  $IPTABLES -X $CHAIN_FORWARD
  
  $IPTABLES -t mangle -F $CHAIN_MANGLE_PREROUTING
  $IPTABLES -t mangle -X $CHAIN_MANGLE_PREROUTING

  $IPTABLES -t mangle -F $CHAIN_MANGLE_POSTROUTING
  $IPTABLES -t mangle -X $CHAIN_MANGLE_POSTROUTING
  
  $IPTABLES -t nat -F $CHAIN_NAT_PREROUTING
  $IPTABLES -t nat -X $CHAIN_NAT_PREROUTING
  
  $IPTABLES -t mangle -F $CHAIN_MANGLE_FORWARD
  $IPTABLES -t mangle -X $CHAIN_MANGLE_FORWARD

  $IPTABLES -t nat -F $CHAIN_NAT_POSTROUTING
  $IPTABLES -t nat -X $CHAIN_NAT_POSTROUTING
  
  $IPTABLES -t nat -F $CHAIN_NAT_AUTHEN
  $IPTABLES -t nat -X $CHAIN_NAT_AUTHEN

  if [ "$BITTORRENT_BLOCK" = "throttle" ]; then
    $IPTABLES -t mangle -F $CHAIN_P2P_CHECK
    $IPTABLES -t mangle -X $CHAIN_P2P_CHECK

    $IPTABLES -t mangle -F $CHAIN_P2P_RECHECK
    $IPTABLES -t mangle -X $CHAIN_P2P_RECHECK

    $IPTABLES -t mangle -F $CHAIN_P2P_DETECT
    $IPTABLES -t mangle -X $CHAIN_P2P_DETECT
  fi
}

##
# Define new chains
##
new_chains () {
  $IPTABLES -N $CHAIN_INPUT_AUTH
  $IPTABLES -N $CHAIN_INPUT
  $IPTABLES -N $CHAIN_FORWARD_AUTH
  $IPTABLES -N $CHAIN_FORWARD
  $IPTABLES -t mangle -N $CHAIN_MANGLE_PREROUTING
  $IPTABLES -t mangle -N $CHAIN_MANGLE_FORWARD
  $IPTABLES -t mangle -N $CHAIN_MANGLE_POSTROUTING
  $IPTABLES -t nat -N $CHAIN_NAT_PREROUTING
  $IPTABLES -t nat -N $CHAIN_NAT_POSTROUTING
  $IPTABLES -t nat -N $CHAIN_NAT_AUTHEN

  if [ "$BITTORRENT_BLOCK" = "throttle" ]; then
    $IPTABLES -t mangle -N $CHAIN_P2P_CHECK
    $IPTABLES -t mangle -N $CHAIN_P2P_RECHECK
    $IPTABLES -t mangle -N $CHAIN_P2P_DETECT
  fi
}

##
# Policy
##
policy () {
  $IPTABLES -P INPUT DROP
  $IPTABLES -P OUTPUT ACCEPT
  $IPTABLES -P FORWARD DROP 
}

cleanup_policy () {
  # Assume before the script running the default policy are all ACCEPT
  $IPTABLES -P INPUT ACCEPT
  $IPTABLES -P OUTPUT ACCEPT
  $IPTABLES -P FORWARD ACCEPT 
}

rules () {
  ##
  # Init rules
  ##
  $IPTABLES -I INPUT -j $CHAIN_INPUT
  $IPTABLES -I INPUT -m connmark --mark 2/2 -j $CHAIN_INPUT_AUTH
  $IPTABLES -I FORWARD -j $CHAIN_FORWARD
  $IPTABLES -I FORWARD -m connmark --mark 2/2 -j $CHAIN_FORWARD_AUTH

  $IPTABLES -t mangle -I PREROUTING -j $CHAIN_MANGLE_PREROUTING
  $IPTABLES -t mangle -I FORWARD -j $CHAIN_MANGLE_FORWARD
  $IPTABLES -t mangle -I POSTROUTING -j $CHAIN_MANGLE_POSTROUTING

  $IPTABLES -t nat -I PREROUTING -j $CHAIN_NAT_PREROUTING
  $IPTABLES -t nat -I POSTROUTING -j $CHAIN_NAT_POSTROUTING
  
  ##
  # Allow all traffic for established and related connections
  ##
  
  $IPTABLES -A $CHAIN_INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
  $IPTABLES -A $CHAIN_FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
  
  $IPTABLES -A $CHAIN_INPUT -i lo -j ACCEPT
  
  ##
  # Allow incoming to our DNS server
  ##
  if [ "$FORWARD_DNS" = "yes" ]; then
    $IPTABLES -A $CHAIN_INPUT -p udp --dport domain -j ACCEPT
    $IPTABLES -A $CHAIN_FORWARD -p udp --dport domain -j ACCEPT
  else
    $IPTABLES -A $CHAIN_INPUT -p udp --dport domain -j ACCEPT
    $IPTABLES -A $CHAIN_FORWARD -p udp --dport domain -j DROP
  fi 

  ##
  # Allow incoming to our HTTP server for login page
  ##
  $IPTABLES -A $CHAIN_INPUT -p tcp -m multiport --dports $SERVER_PORTS_ALLOW -j ACCEPT
  
  ##
  # Allow incoming to our SSH server for remote maintenance access
  ##
  if [ "$SSH" = "yes" ]; then
    $IPTABLES -A $CHAIN_INPUT -p tcp --dport ssh -j ACCEPT
  fi

  ##
  # Allow rate limited ICMP 
  ##
  $IPTABLES -A $CHAIN_INPUT -p icmp -m limit --limit 1/second -j ACCEPT

  ##
  # Allow incoming DHCP request
  ##

  if [ "$FORWARD_DHCP" = "yes" ]; then
    $IPTABLES -A $CHAIN_INPUT $DEV_IN_PARAM $DEV_LAN \
      -p udp --dport 67:68 -j DROP 
    $IPTABLES -A $CHAIN_FORWARD $DEV_IN_PARAM $DEV_LAN \
      -p udp --dport 67:68 -j ACCEPT
  else
    $IPTABLES -A $CHAIN_INPUT $DEV_IN_PARAM $DEV_LAN \
      -p udp --dport 67:68 -j ACCEPT 
    $IPTABLES -A $CHAIN_FORWARD $DEV_IN_PARAM $DEV_LAN \
      -p udp --dport 67:68 -j DROP
  fi

  ##
  # Bittorrent Blocking (layer7 module in kernel is needed)
  # Note: 
  #   bittorrent-announce is custom pattern defined may warning with official
  #   pattern downloaded from l7-filter site.
  ##
  if [ "$BITTORRENT_BLOCK" = "yes" ]; then
    $IPTABLES -t mangle -A $CHAIN_MANGLE_PREROUTING -m layer7 --l7proto bittorrent-announce -j DROP
    $IPTABLES -t mangle -A $CHAIN_MANGLE_PREROUTING -m layer7 --l7proto bittorrent -j DROP
  fi
  
  ##
  # Mark the connections that have been authorized
  ##
  $IPTABLES -t mangle -A $CHAIN_MANGLE_PREROUTING -m set --set rahunas_set dst -j CONNMARK --set-mark 2 
  $IPTABLES -t mangle -A $CHAIN_MANGLE_PREROUTING -m set --set rahunas_set src -j CONNMARK --set-mark 2 

  ##
  # P2P Throttle
  ##
  if [ "$BITTORRENT_BLOCK" = "throttle" ]; then
    $IPTABLES -t mangle -A $CHAIN_MANGLE_FORWARD -m connmark --mark 2/2 -j $CHAIN_P2P_CHECK
    $IPTABLES -t mangle -A $CHAIN_MANGLE_FORWARD -m set --set $P2P_SET src -j MARK --set-mark 3
    $IPTABLES -t mangle -A $CHAIN_MANGLE_FORWARD -m set --set $P2P_SET dst -j MARK --set-mark 3


    $IPTABLES -t mangle -A $CHAIN_P2P_CHECK -m layer7 --l7proto bittorrent -j $CHAIN_P2P_DETECT
    $IPTABLES -t mangle -A $CHAIN_P2P_CHECK -m layer7 --l7proto bittorrent-announce -j $CHAIN_P2P_DETECT
    $IPTABLES -t mangle -A $CHAIN_P2P_CHECK -m set --set $P2P_SET src -j $CHAIN_P2P_RECHECK
    $IPTABLES -t mangle -A $CHAIN_P2P_CHECK -j RETURN


    $IPTABLES -t mangle -A $CHAIN_P2P_DETECT -m recent --name $P2P_SET --update --seconds 600 -j RETURN
    $IPTABLES -t mangle -A $CHAIN_P2P_DETECT -j SET --add-set $P2P_SET src
    $IPTABLES -t mangle -A $CHAIN_P2P_DETECT -m recent --name $P2P_SET --set -j RETURN


    $IPTABLES -t mangle -A $CHAIN_P2P_RECHECK -m recent --name $P2P_SET --rcheck --seconds 600 -j RETURN
    $IPTABLES -t mangle -A $CHAIN_P2P_RECHECK -j SET --del-set $P2P_SET src
    $IPTABLES -t mangle -A $CHAIN_P2P_RECHECK -m recent --name $P2P_SET --remove -j RETURN 
  fi
   
  ##
  # Accept Forwarding for the authorized clients
  ##
  $IPTABLES -A $CHAIN_FORWARD_AUTH -j ACCEPT

  ##
  # SQUID Cache-Proxy
  ##
  if [ "$PROXY_PORT" != "0" ]; then
    if [ "$PROXY_HOST" = "localhost" ]; then
      $IPTABLES -A $CHAIN_INPUT_AUTH -p tcp --dport $PROXY_PORT -j ACCEPT
    fi

    if [ "$TRANSPARENT_PROXY" = "yes" ]; then
      if [ "$PROXY_HOST" = "localhost" ]; then
        $IPTABLES -t nat -A $CHAIN_NAT_PREROUTING -p tcp --dport http \
          -m connmark --mark 2/2 -j REDIRECT --to-ports $PROXY_PORT
      else
        $IPTABLES -t nat -A $CHAIN_NAT_PRETROUTING -p tcp --dport http \
          -m connmark --mark 2/2 \
          -j DNAT --to-destination ${PROXY_HOST}:${PROXY_PORT}
      fi
    fi
  fi
  
  ##
  # Redirect unauthorized clients to login page (with rate limited throttling)
  ##
  
  $IPTABLES -t nat -A $CHAIN_NAT_PREROUTING -p tcp -m multiport \
    --dports $SERVER_PORTS_INTERCEPT -d ! $SERVER \
    $DEV_IN_PARAM $DEV_LAN -m connmark ! --mark 2/2 \
    -j $CHAIN_NAT_AUTHEN
  
  $IPTABLES -t nat -A $CHAIN_NAT_AUTHEN \
    -m recent --rcheck --seconds 15 --name AUTHEN_THROTTLE -j DROP
  
  $IPTABLES -t nat -A $CHAIN_NAT_AUTHEN -p tcp -m hashlimit --hashlimit 5/sec \
    --hashlimit-mode srcip --hashlimit-burst 10 \
    --hashlimit-htable-expire 15000 --hashlimit-name authen \
    -j REDIRECT --to-port 8888
  
  $IPTABLES -t nat -A $CHAIN_NAT_AUTHEN -m recent --set --name AUTHEN_THROTTLE \
    -j DROP

  ##
  # MASQUERADE
  ##
  if [ "$MASQUERADE" = "yes" ]; then
    $IPTABLES -t nat -A $CHAIN_NAT_POSTROUTING $DEV_OUT_PARAM $DEV_WAN \
      -j MASQUERADE
  fi

  ##
  # Excluded IP
  ##
  for excluded in $EXCLUDED;
  do
    $IPTABLES -t mangle -I $CHAIN_MANGLE_PREROUTING -s $excluded \
      -j CONNMARK --set-mark 2
    $IPTABLES -t mangle -I $CHAIN_MANGLE_PREROUTING -d $excluded \
      -j CONNMARK --set-mark 2
  done 
  
  ##
  # Bandwidth Shaping: IMQ - Intermediate Queueing Device
  ##
  if [ "$BANDWIDTH_SHAPE_IMQ" = "yes" ]; then
    $IPTABLES -t mangle -I $CHAIN_MANGLE_POSTROUTING $DEV_OUT_PARAM $DEV_LAN \
      -j IMQ --todev 0
    $IPTABLES -t mangle -I $CHAIN_MANGLE_PREROUTING $DEV_IN_PARAM $DEV_LAN \
      -j IMQ --todev 1
  fi

  ##
  # Return to main chains
  ##
  $IPTABLES -A $CHAIN_INPUT_AUTH -j RETURN
  $IPTABLES -A $CHAIN_INPUT -j RETURN
  $IPTABLES -A $CHAIN_FORWARD_AUTH -j RETURN
  $IPTABLES -A $CHAIN_FORWARD -j RETURN
  $IPTABLES -t mangle -A $CHAIN_MANGLE_PREROUTING -j RETURN
  $IPTABLES -t mangle -A $CHAIN_MANGLE_FORWARD -j RETURN
  $IPTABLES -t mangle -A $CHAIN_MANGLE_POSTROUTING -j RETURN
  $IPTABLES -t nat -A $CHAIN_NAT_PREROUTING -j RETURN
  $IPTABLES -t nat -A $CHAIN_NAT_POSTROUTING -j RETURN
}

start () {
  test ! -f $RUN || exit 0

  add_set
  new_chains
  policy 
  rules

  touch $RUN
}

stop () {
  test -f $RUN || exit 0

  cleanup
  cleanup_policy
  cleanup_set
 
  rm -f $RUN
}

reload() {
  test -f $RUN || exit 0

  # Do not cleanup set
  cleanup
  cleanup_policy
  rm -f $RUN

  new_chains
  policy 
  rules
  touch $RUN
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  reload)
    reload     
    ;; 
  *)
    N=@sysconfdir@/rahunas/firewall.sh
    echo "Usage: $N {start|stop|restart|reload}"
    exit 3
    ;;
esac 

exit 0
