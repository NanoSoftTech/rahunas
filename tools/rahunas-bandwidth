#!/bin/sh
# File: rahunas-bandwidth
# Description: The bandwidth shaper wrapper script for RahuNAS

prefix=/usr
PATH=/sbin:/bin:/usr/sbin:/usr/bin:${prefix}/sbin:${prefix}/bin
exec_prefix=${prefix}

TC=/sbin/tc
IP=/sbin/ip
BC=/usr/bin/bc
IFCONFIG=/sbin/ifconfig

INIT=/etc/default/rahunas
RUN=/var/run/rahunas-bandwidth

test -f $INIT || exit 0
. $INIT

# Interface Speed (kbit)
INTERFACE_SPEED=${INTERFACE_SPEED:-51200}
QDISC=htb

MAX_DOWN_SPEED=${INTERFACE_SPEED}
MAX_UP_SPEED=${INTERFACE_SPEED}

R2Q_DOWN=${R2Q_DOWN:-125}
R2Q_UP=${R2Q_UP:-10}
HZ=${HZ:-1000}
MAX_BURST_PCT=${MAX_BURST_PCT:-70}
NORMAL_SPEED_PCT=${NORMAL_SPEED_PCT:-50}

get_iface_burst () {
  speed=$1
  echo "${speed}/8/${HZ}" | $BC
}

get_max_burst_kb () {
  direction=$1
  if [ "x$direction" = "xdown" ]; then
    echo "${MAX_DOWN_SPEED}/8/${HZ}*${MAX_BURST_PCT}/100" | $BC
  else
    echo "${MAX_UP_SPEED}/8/${HZ}*${MAX_BURST_PCT}/100" | $BC
  fi
}

get_max_burst () {
  direction=$1
  max_burst_kb=`get_max_burst_kb $direction`
  echo "$max_burst_kb * 1024" | $BC
}

get_burst () {
  speed=$1
  direction=$2
  max_burst=`get_max_burst $direction`

  b=`echo "${speed}/8/${HZ}" | $BC`

  if [ $b -lt 2048 ]; then
    echo 2048
  elif [ $b -gt $max_burst ]; then
    echo $max_burst
  else
    echo $b
  fi
}

get_speed_normal () {
  speed=$1
  percent=$NORMAL_SPEED_PCT

  echo "${speed}*${percent}/100" | $BC
}

INTERFACE_ID="0xffff"
DEFAULT_ID="0xfffe"

MESSAGE=""


test "$RUN_DAEMON" = "yes" || exit 0
test -f $RAHUNAS_CONFIG || exit 1

SHAPING_DOWN_INF=""
SHAPING_UP_INF=""

MSG_NOT_COMPLETED="NOT COMPLETED"

get_config_value () {
  section=$1
  key=$2
  file=$3

  test -n "$file" || return
  test -e "$file" && cat "$file" | sed -e "0,/$section = {/ ! { /}/,/$section = {/ ! s/^/>>/ }" | grep "^>>" | sed -e "s/^>>//g" | grep -w "$key" | cut -d= -f2 | sed "s/^ *\(.*[^ ]\) *$/\1/" | sed 's/"//g'
}

BANDWIDTH_SHAPE=`get_config_value main bandwidth_shape $RAHUNAS_CONFIG`

test "$BANDWIDTH_SHAPE" = "yes" || exit 0

interface_setting () {
  if [ "x$QDISC" = "xhfsc" ]; then
    qdisc_down_opt="hfsc default ${DEFAULT_ID}"
    qdisc_up_opt="hfsc default ${DEFAULT_ID}"
    class_down_opt="hfsc sc rate ${MAX_DOWN_SPEED}kbit ul rate ${INTERFACE_SPEED}kbit"
    class_up_opt="hfsc sc rate ${MAX_UP_SPEED}kbit ul rate ${INTERFACE_SPEED}kbit"
    class_down_iface_opt=$class_down_opt
    class_down_default_opt=$class_down_opt
    class_up_iface_opt=$class_up_opt
    class_up_default_opt=$class_up_opt
  else
    qdisc_down_opt="htb default ${DEFAULT_ID} r2q ${R2Q_DOWN}"
    qdisc_up_opt="htb default ${DEFAULT_ID} r2q ${R2Q_UP}"
    class_down_opt="htb rate %skbit ceil ${INTERFACE_SPEED}kbit"
    class_up_opt="htb rate %skbit ceil ${INTERFACE_SPEED}kbit"
    class_down_iface_opt=`printf "$class_down_opt burst %sKb" "${MAX_DOWN_SPEED}" "$(get_iface_burst ${MAX_DOWN_SPEED})"`
    class_down_default_opt=`printf "$class_down_opt burst %sKb" "$(get_speed_normal ${MAX_DOWN_SPEED})" "$(get_max_burst_kb down)"`
    class_up_iface_opt=`printf "$class_up_opt burst %sKb" "${MAX_UP_SPEED}" "$(get_iface_burst ${MAX_UP_SPEED})"`
    class_up_default_opt=`printf "$class_up_opt burst %sKb" "$(get_speed_normal ${MAX_UP_SPEED})" "$(get_max_burst_kb up)"`
  fi

  case "$1" in
    start)
      # Interface Downlink
      $TC qdisc add dev $SHAPING_DOWN_INF root handle 1: $qdisc_down_opt

      $TC class add dev $SHAPING_DOWN_INF parent 1: \
        classid 1:${INTERFACE_ID} $class_down_iface_opt
      $TC class add dev $SHAPING_DOWN_INF parent 1:${INTERFACE_ID} \
        classid 1:${DEFAULT_ID} $class_down_default_opt

      # Interface Uplink
      $IFCONFIG $SHAPING_UP_INF up
      $TC qdisc add dev $SHAPING_UP_INF root handle 1: $qdisc_up_opt

      $TC class add dev $SHAPING_UP_INF parent 1: \
        classid 1:${INTERFACE_ID} $class_up_iface_opt
      $TC class add dev $SHAPING_UP_INF parent 1:${INTERFACE_ID} \
        classid 1:${DEFAULT_ID} $class_up_default_opt

      # Redirect incoming traffic to IFB
      $TC qdisc add dev $SHAPING_DOWN_INF ingress
      $TC filter add dev $SHAPING_DOWN_INF parent ffff: protocol ip prio 10 u32 \
        match u32 0 0 flowid 1:${INTERFACE_ID} \
        action mirred egress redirect dev $SHAPING_UP_INF

      # Hash filter
      # Interface Downlink
      $TC filter add dev $SHAPING_DOWN_INF parent 1: prio 5 protocol ip u32
      $TC filter add dev $SHAPING_DOWN_INF parent 1: prio 5 handle 2: \
        protocol ip u32 divisor 256
      $TC filter add dev $SHAPING_DOWN_INF parent 1: prio 5 protocol ip u32 \
        ht 800:: match ip dst 0.0.0.0/0 hashkey mask 0xff000000 at 16 link 2:

      # Interface Uplink
      $TC filter add dev $SHAPING_UP_INF parent 1: prio 10 protocol ip u32
      $TC filter add dev $SHAPING_UP_INF parent 1: prio 10 handle 2: \
        protocol ip u32 divisor 256
      $TC filter add dev $SHAPING_UP_INF parent 1: prio 10 protocol ip u32 \
        ht 800:: match ip src 0.0.0.0/0 hashkey mask 0xff000000 at 12 link 2:
      ;;
  stop)
      # Redirect incoming traffic to IFB
      $TC filter del dev $SHAPING_DOWN_INF parent ffff: protocol ip prio 10
      $TC qdisc del dev $SHAPING_DOWN_INF ingress

      # Interface Downlink
      $TC qdisc del dev $SHAPING_DOWN_INF root

      # Interface Uplink
      $TC qdisc del dev $SHAPING_UP_INF root

      $IFCONFIG $SHAPING_UP_INF down
      ;;
  esac
}

start () {
  if [ ! -e $RUN ]; then
    interface_setting start
    MESSAGE="Start OK"
    touch $RUN
  else
    MESSAGE="Already started"
  fi
}

stop () {
  if [ -e $RUN ]; then
    interface_setting stop
    MESSAGE="Stop OK"
    rm -f $RUN
  else
    MESSAGE="Already stopped"
  fi
}

usage_add_replace() {
  echo "Usage: $1 $2 ID IP DOWNSPEED UPSPEED DOWN_IF UP_IF"
  echo "         ID - ID number from 1 to 10240"
  echo "         IP - IPv4 Address"
  echo "  DOWNSPEED - Download speed (bits/s)"
  echo "    UPSPEED - Upload speed (bits/s)"
  echo "    DOWN_IF - Downstream interface (eth0, eth1, vlan1, ...)"
  echo "      UP_IF - Upstream interface (ifb0, ifb1, ...)"
}

usage_del() {
  echo "Usage: $1 del ID DOWN_IF UP_IF"
  echo "         ID - ID number from 1 to 10240"
  echo "    DOWN_IF - Downstream interface (eth0, eth1, vlan1, ...)"
  echo "      UP_IF - Upstream interface (ifb0, ifb1, ...)"
}

usage() {
  echo "Usage: $1 {start|stop|restart|add|replace|del}"
  echo "       $1 add --help"
  echo "       $1 replace --help"
  echo "       $1 del --help"
}

filter_add() {
  ID=$1
  IP=$2
  TYPE=$3

  if [ "x$TYPE" = "xdownlink" ]; then
    iface=${SHAPING_DOWN_INF}
    filter_opt="dst"
    offset=16
    prio=5
  else
    iface=${SHAPING_UP_INF}
    filter_opt=src
    offset=12
    prio=10
  fi

  ip1=`echo $IP | cut -d. -f1`
  ip2=`echo $IP | cut -d. -f2`
  ip3=`echo $IP | cut -d. -f3`
  ip4=`echo $IP | cut -d. -f4`

  ht1=`echo "obase=16;$ip1" | $BC | awk '{print tolower($0)}'`
  ht2=`echo "obase=16;$ip2" | $BC | awk '{print tolower($0)}'`
  ht3=`echo "obase=16;$ip3" | $BC | awk '{print tolower($0)}'`
  ht4=`echo "obase=16;$ip4" | $BC | awk '{print tolower($0)}'`

  $TC -p filter show dev ${iface} | grep -w "${ip1}.0.0.0/8" >/dev/null 2>&1
  if [ $? != 0 ]; then
    $TC filter add dev ${iface} parent 1: prio $prio handle a${ht1}: \
      protocol ip u32 divisor 256
    $TC filter add dev ${iface} parent 1: prio $prio protocol ip u32 \
      ht 2:${ht1}: match ip $filter_opt ${ip1}.0.0.0/8 \
      hashkey mask 0xff0000 at $offset link a${ht1}:
  fi

  $TC -p filter show dev ${iface} | grep -w "${ip1}.${ip2}.0.0/16" >/dev/null 2>&1
  if [ $? != 0 ]; then
    $TC filter add dev ${iface} parent 1: prio $prio handle b${ht2}: \
      protocol ip u32 divisor 256
    $TC filter add dev ${iface} parent 1: prio $prio protocol ip u32 \
      ht a${ht1}:${ht2}: match ip $filter_opt ${ip1}.${ip2}.0.0/16 \
      hashkey mask 0xff00 at $offset link b${ht2}:
  fi

  $TC -p filter show dev ${iface} | grep -w "${ip1}.${ip2}.${ip3}.0/24" >/dev/null 2>&1
  if [ $? != 0 ]; then
    $TC filter add dev ${iface} parent 1: prio $prio handle c${ht3}: \
      protocol ip u32 divisor 256
    $TC filter add dev ${iface} parent 1: prio $prio protocol ip u32 \
      ht b${ht2}:${ht3}: match ip $filter_opt ${ip1}.${ip2}.${ip3}.0/24 \
      hashkey mask 0xff at $offset link c${ht3}:
  fi

  $TC -p filter show dev ${iface} | grep -w "${ip1}.${ip2}.${ip3}.${ip4}/32" >/dev/null 2>&1
  if [ $? != 0 ]; then
    $TC filter add dev ${iface} parent 1: prio $prio protocol ip u32 \
      ht c${ht3}:${ht4}: match ip $filter_opt ${IP}/32 flowid 1:${ID}
  else
    $TC filter del dev ${iface} parent 1: prio $prio protocol ip \
      handle c${ht3}:${ht4}:800 u32
    $TC filter add dev ${iface} parent 1: prio $prio protocol ip u32 \
      ht c${ht3}:${ht4}: match ip $filter_opt ${IP}/32 flowid 1:${ID}
  fi
}

filter_del() {
  ID=$1
  TYPE=$2

  if [ "x$TYPE" = "xdownlink" ]; then
    iface=$SHAPING_DOWN_INF
    prio=5
  else
    iface=$SHAPING_UP_INF
    prio=10
  fi

  handle=`$TC -p filter show dev ${iface} | grep -w "flowid 1:${ID}" | grep "fh " | awk -F"fh " '{print $2}' | awk '{print $1}'`
  for h in $handle; do
    $TC filter del dev $iface parent 1: prio $prio protocol ip handle $h u32
  done
}

bw_set() {
  ACTION=$1
  ID=`echo "obase=16;$2" | $BC | awk '{print tolower($0)}'`

  if [ -z "$ID" ]; then
    MESSAGE=$MSG_NOT_COMPLETED
    return
  fi

  IP=$3
  DOWNSPEED=$4
  UPSPEED=$5
  MAX_DOWN=`echo "$MAX_DOWN_SPEED*1024" | $BC`
  MAX_UP=`echo "$MAX_UP_SPEED*1024" | $BC`

  if [ $DOWNSPEED -gt $MAX_DOWN ]; then
    DOWNSPEED=$MAX_DOWN
  fi

  if [ $UPSPEED -gt $MAX_UP ]; then
    UPSPEED=$MAX_UP
  fi

  DOWN_MBPS=`echo "scale=2; $DOWNSPEED/1048576" | $BC | awk '{printf "%.2f", $0}'`
  UP_MBPS=`echo "scale=2; $UPSPEED/1048576" | $BC | awk '{printf "%.2f", $0}'`

  DOWN_VALID=yes
  UP_VALID=yes

  if [ "$DOWN_MBPS" = "0.00" ]; then
    DOWN_VALID=
    DOWN_MBPS="Unlimit"
  fi

  if [ "$UP_MBPS" = "0.00" ]; then
    UP_VALID=
    UP_MBPS="Unlimit"
  fi

  ACTION_MSG="Add"
  test "x$ACTION" = "xreplace" && ACTION_MSG="Replace"
  MESSAGE="${ACTION_MSG} shaping slot id: $ID for $IP with D/U=${DOWN_MBPS}/${UP_MBPS} Mbits/s"

  if [ "x$QDISC" = "xhfsc" ]; then
    class_down_opt="hfsc sc rate ${DOWNSPEED}bit ul rate ${DOWNSPEED}"
    class_up_opt="hfsc sc rate ${UPSPEED}bit ul rate ${UPSPEED}"
  else
    class_down_opt="htb rate `get_speed_normal ${DOWNSPEED}`bit ceil ${DOWNSPEED}bit burst `get_burst ${DOWNSPEED} down`"
    class_up_opt="htb rate `get_speed_normal ${UPSPEED}`bit ceil ${UPSPEED}bit burst `get_burst ${UPSPEED} up`"
  fi

  # Downlink
  if [ "x$DOWN_VALID" = "xyes" ]; then
    $TC class add dev $SHAPING_DOWN_INF parent 1:${INTERFACE_ID} \
      classid 1:${ID} $class_down_opt >/dev/null 2>&1
    if [ $? != 0 ]; then
      $TC class replace dev $SHAPING_DOWN_INF parent 1:${INTERFACE_ID} \
        classid 1:${ID} $class_down_opt
    fi

    filter_add $ID $IP downlink
  fi

  # Uplink
  if [ "x$UP_VALID" = "xyes" ]; then
    $TC class add dev $SHAPING_UP_INF parent 1:${INTERFACE_ID} \
      classid 1:${ID} $class_up_opt >/dev/null 2>&1
    if [ $? != 0 ]; then
      $TC class replace dev $SHAPING_UP_INF parent 1:${INTERFACE_ID} \
        classid 1:${ID} $class_up_opt
    fi

    filter_add $ID $IP uplink
  fi
}

bw_del() {
  ID=`echo "obase=16;$1" | $BC | awk '{print tolower($0)}'`

  if [ -z "$ID" ]; then
    MESSAGE=$MSG_NOT_COMPLETED
    return
  fi

  MESSAGE="Delete shaping slot id: $ID"

  # Filter Removal
  # Downlink/Uplink
  filter_del $ID downlink
  filter_del $ID uplink

  # Class Removal
  # Downlink/Uplink
  $TC class del dev $SHAPING_DOWN_INF parent 1:${INTERFACE_ID} classid 1:${ID} >/dev/null 2>&1
  $TC class del dev $SHAPING_UP_INF parent 1:${INTERFACE_ID} classid 1:${ID} >/dev/null 2>&1
}

chk_interface () {
  SHAPING_DOWN_INF=$1
  SHAPING_UP_INF=$2

  iface_list=`$IFCONFIG -a | grep "Link encap" | awk '{print $1}'`

  echo $iface_list | grep -w "$SHAPING_DOWN_INF" > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    return 1
  fi

  echo $iface_list | grep -w "$SHAPING_UP_INF" > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    return 1
  fi

  return 0
}

N=${prefix}/sbin/rahunas-bandwidth

case "$1" in
  start)
    if [ -z "$2" ] || [ -z "$3" ]; then
      MESSAGE="$MSG_NOT_COMPLETED"
    else
      chk_interface $2 $3
      if [ $? -eq 0 ]; then
        RUN=${RUN}-${SHAPING_DOWN_INF}-${SHAPING_UP_INF}
        start
      else
        MESSAGE="$MSG_NOT_COMPLETED"
      fi
    fi

    test -n "$MESSAGE" || MESSAGE="$MSG_NOT_COMPLETED"
    echo $MESSAGE
    ;;
  stop)
    if [ -z "$2" ] || [ -z "$3" ]; then
      MESSAGE="$MSG_NOT_COMPLETED"
    else
      chk_interface $2 $3
      if [ $? -eq 0 ]; then
        RUN=${RUN}-${SHAPING_DOWN_INF}-${SHAPING_UP_INF}
        stop
      else
        MESSAGE="$MSG_NOT_COMPLETED"
      fi
    fi

    test -n "$MESSAGE" || MESSAGE="$MSG_NOT_COMPLETED"
    echo $MESSAGE

    ;;
  restart)
    if [ -z "$2" ] || [ -z "$3" ]; then
      MESSAGE="$MSG_NOT_COMPLETED"
    else
      chk_interface $2 $3
      if [ $? -eq 0 ]; then
        RUN=${RUN}-${SHAPING_DOWN_INF}-${SHAPING_UP_INF}
        stop
        start
      else
        MESSAGE="$MSG_NOT_COMPLETED"
      fi
    fi

    test -n "$MESSAGE" || MESSAGE="$MSG_NOT_COMPLETED"
    echo $MESSAGE

    ;;
  add|replace)
    if [ "$2" = "--help" ]; then
      usage_add_replace $N $1
      exit 3
    fi

    if [ $# != 7 ]; then
      echo "Error: too few arguments"
      usage_add_replace $N $1
      exit 1
    fi

    if [ -z "$6" ] || [ -z "$7" ]; then
      MESSAGE="$MSG_NOT_COMPLETED"
    else
      chk_interface $6 $7
      if [ $? -eq 0 ]; then
        RUN=${RUN}-${SHAPING_DOWN_INF}-${SHAPING_UP_INF}
        bw_set $1 $2 $3 $4 $5
      else
        MESSAGE="$MSG_NOT_COMPLETED"
      fi
    fi
    echo $MESSAGE
    ;;
  del)
    if [ "$2" = "--help" ]; then
      usage_del $N
      exit 3
    fi

    if [ $# != 4 ]; then
      echo "Error: too few arguments"
      usage_del $N
      exit 1
    fi
    if [ -z "$3" ] || [ -z "$4" ]; then
      MESSAGE="$MSG_NOT_COMPLETED"
    else
      chk_interface $3 $4
      if [ $? -eq 0 ]; then
        RUN=${RUN}-${SHAPING_DOWN_INF}-${SHAPING_UP_INF}
        bw_del $2
      else
        MESSAGE="$MSG_NOT_COMPLETED"
      fi
    fi
    echo $MESSAGE
    ;;
  *)
    usage $N
    exit 3
    ;;
esac

exit 0
